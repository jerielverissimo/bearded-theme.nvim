local M = {}

---@param colors BeardedColors
---@param config? BeardedConfig
function M.setup(colors, config)
    config = config or require("bearded-theme").config
    local theme = colors.theme

    return {
        -- Git Signs
        GitSignsAdd = { fg = theme.vcs.added, bg = theme.ui.bg_gutter },
        GitSignsChange = { fg = theme.vcs.changed, bg = theme.ui.bg_gutter },
        GitSignsDelete = { fg = theme.vcs.removed, bg = theme.ui.bg_gutter },
        GitSignsAddNr = { fg = theme.vcs.added, bg = theme.ui.bg_gutter },
        GitSignsChangeNr = { fg = theme.vcs.changed, bg = theme.ui.bg_gutter },
        GitSignsDeleteNr = { fg = theme.vcs.removed, bg = theme.ui.bg_gutter },
        GitSignsAddLn = { bg = theme.diff.add },
        GitSignsChangeLn = { bg = theme.diff.change },
        GitSignsDeleteLn = { bg = theme.diff.delete },
        
        -- Telescope
        TelescopeBorder = { fg = theme.ui.float.fg_border, bg = config.transparent and "NONE" or theme.ui.float.bg },
        TelescopeTitle = { fg = theme.syn.fun, bold = true },
        TelescopePromptTitle = { fg = theme.syn.keyword, bold = true },
        TelescopeResultsTitle = { fg = theme.syn.fun, bold = true },
        TelescopePreviewTitle = { fg = theme.vcs.added, bold = true },
        TelescopePromptNormal = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.float.bg },
        TelescopeResultsNormal = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg_p1 },
        TelescopePreviewNormal = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg },
        TelescopePromptBorder = { fg = theme.ui.float.fg_border, bg = config.transparent and "NONE" or theme.ui.float.bg },
        TelescopeResultsBorder = { fg = theme.ui.float.fg_border, bg = config.transparent and "NONE" or theme.ui.bg_p1 },
        TelescopePreviewBorder = { fg = theme.ui.float.fg_border, bg = config.transparent and "NONE" or theme.ui.bg },
        TelescopeSelection = { fg = theme.ui.fg, bg = theme.ui.bg_visual },
        TelescopeSelectionCaret = { fg = theme.syn.keyword, bg = theme.ui.bg_visual },
        TelescopeMatching = { fg = theme.syn.keyword, bold = true },
        TelescopePromptPrefix = { fg = theme.syn.keyword },
        
        -- NvimTree
        NvimTreeNormal = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg_dim },
        NvimTreeNormalNC = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg_dim },
        NvimTreeFolderName = { fg = theme.syn.fun },
        NvimTreeOpenedFolderName = { fg = theme.syn.fun, bold = true },
        NvimTreeEmptyFolderName = { fg = theme.ui.fg_dim },
        NvimTreeIndentMarker = { fg = theme.ui.nontext },
        NvimTreeVertSplit = { fg = theme.ui.float.fg_border },
        NvimTreeWinSeparator = { fg = theme.ui.float.fg_border },
        NvimTreeRootFolder = { fg = theme.syn.keyword, bold = true },
        NvimTreeSymlink = { fg = theme.syn.type },
        NvimTreeStatuslineNc = { fg = theme.ui.bg_dim, bg = theme.ui.bg_dim },
        NvimTreeGitDirty = { fg = theme.vcs.changed },
        NvimTreeGitNew = { fg = theme.vcs.added },
        NvimTreeGitDeleted = { fg = theme.vcs.removed },
        NvimTreeGitStaged = { fg = theme.vcs.added },
        NvimTreeSpecialFile = { fg = theme.syn.special1 },
        NvimTreeImageFile = { fg = theme.syn.special2 },
        NvimTreeMarkdownFile = { fg = theme.syn.fun },
        NvimTreeExecFile = { fg = theme.vcs.added, bold = true },
        NvimTreeOpenedFile = { fg = theme.syn.special1, italic = true },
        NvimTreeWindowPicker = { bg = theme.ui.bg_p1, fg = theme.syn.keyword, bold = true },
        
        -- Neo-tree
        NeoTreeNormal = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg_dim },
        NeoTreeNormalNC = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg_dim },
        NeoTreeDirectoryName = { fg = theme.syn.fun },
        NeoTreeDirectoryIcon = { fg = theme.syn.fun },
        NeoTreeRootName = { fg = theme.syn.keyword, bold = true },
        NeoTreeFileName = { fg = theme.ui.fg },
        NeoTreeFileIcon = { fg = theme.ui.fg },
        NeoTreeModified = { fg = theme.vcs.changed },
        NeoTreeGitAdded = { fg = theme.vcs.added },
        NeoTreeGitDeleted = { fg = theme.vcs.removed },
        NeoTreeGitModified = { fg = theme.vcs.changed },
        NeoTreeGitConflict = { fg = theme.diag.error },
        NeoTreeGitUntracked = { fg = theme.vcs.changed },
        NeoTreeIndentMarker = { fg = theme.ui.nontext },
        NeoTreeExpander = { fg = theme.ui.nontext },
        NeoTreeDimText = { fg = theme.ui.fg_dim },
        NeoTreeFilterTerm = { fg = theme.syn.keyword, bold = true },
        NeoTreeFloatBorder = { fg = theme.ui.float.fg_border, bg = config.transparent and "NONE" or theme.ui.float.bg },
        NeoTreeFloatTitle = { fg = theme.syn.fun, bold = true },
        NeoTreeTitleBar = { fg = theme.syn.fun, bg = theme.ui.bg_p1 },
        NeoTreeFileNameOpened = { fg = theme.syn.special1 },
        NeoTreeTabActive = { fg = theme.ui.fg, bg = theme.ui.bg },
        NeoTreeTabInactive = { fg = theme.ui.fg_dim, bg = theme.ui.bg_p1 },
        NeoTreeTabSeparatorActive = { fg = theme.ui.bg, bg = theme.ui.bg },
        NeoTreeTabSeparatorInactive = { fg = theme.ui.bg_p1, bg = theme.ui.bg_p1 },
        NeoTreeVertSplit = { fg = theme.ui.float.fg_border },
        NeoTreeWinSeparator = { fg = theme.ui.float.fg_border },
        NeoTreeStatusLineNC = { fg = theme.ui.bg_dim, bg = theme.ui.bg_dim },
        
        -- Dashboard
        DashboardShortCut = { fg = theme.syn.special1 },
        DashboardHeader = { fg = theme.syn.keyword },
        DashboardCenter = { fg = theme.syn.fun },
        DashboardFooter = { fg = theme.syn.comment, italic = true },
        DashboardKey = { fg = theme.syn.special1 },
        DashboardDesc = { fg = theme.syn.fun },
        DashboardIcon = { fg = theme.syn.special1 },
        
        -- Alpha (dashboard)
        AlphaShortcut = { fg = theme.syn.special1 },
        AlphaHeader = { fg = theme.syn.keyword },
        AlphaHeaderLabel = { fg = theme.syn.keyword },
        AlphaFooter = { fg = theme.syn.comment, italic = true },
        AlphaButtons = { fg = theme.syn.fun },
        
        -- Which-key
        WhichKey = { fg = theme.syn.fun },
        WhichKeyGroup = { fg = theme.syn.keyword },
        WhichKeyDesc = { fg = theme.ui.fg },
        WhichKeySeperator = { fg = theme.syn.punct },
        WhichKeyFloat = { bg = config.transparent and "NONE" or theme.ui.float.bg },
        WhichKeyBorder = { fg = theme.ui.float.fg_border, bg = config.transparent and "NONE" or theme.ui.float.bg },
        WhichKeyValue = { fg = theme.syn.comment },
        
        -- Notify
        NotifyBackground = { bg = theme.ui.bg },
        NotifyERRORBorder = { fg = theme.diag.error },
        NotifyWARNBorder = { fg = theme.diag.warning },
        NotifyINFOBorder = { fg = theme.diag.info },
        NotifyDEBUGBorder = { fg = theme.ui.fg_dim },
        NotifyTRACEBorder = { fg = theme.syn.comment },
        NotifyERRORIcon = { fg = theme.diag.error },
        NotifyWARNIcon = { fg = theme.diag.warning },
        NotifyINFOIcon = { fg = theme.diag.info },
        NotifyDEBUGIcon = { fg = theme.ui.fg_dim },
        NotifyTRACEIcon = { fg = theme.syn.comment },
        NotifyERRORTitle = { fg = theme.diag.error },
        NotifyWARNTitle = { fg = theme.diag.warning },
        NotifyINFOTitle = { fg = theme.diag.info },
        NotifyDEBUGTitle = { fg = theme.ui.fg_dim },
        NotifyTRACETitle = { fg = theme.syn.comment },
        NotifyERRORBody = { fg = theme.ui.fg },
        NotifyWARNBody = { fg = theme.ui.fg },
        NotifyINFOBody = { fg = theme.ui.fg },
        NotifyDEBUGBody = { fg = theme.ui.fg },
        NotifyTRACEBody = { fg = theme.ui.fg },
        
        -- nvim-cmp
        CmpDocumentation = { link = "NormalFloat" },
        CmpDocumentationBorder = { link = "FloatBorder" },
        CmpCompletion = { link = "Pmenu" },
        CmpCompletionSel = { link = "PmenuSel" },
        CmpCompletionBorder = { fg = theme.ui.float.fg_border, bg = theme.ui.pmenu.bg },
        CmpCompletionThumb = { link = "PmenuThumb" },
        CmpCompletionSbar = { link = "PmenuSbar" },
        CmpItemAbbr = { fg = theme.ui.fg },
        CmpItemAbbrDeprecated = { fg = theme.syn.deprecated, strikethrough = true },
        CmpItemAbbrMatch = { fg = theme.syn.keyword, bold = true },
        CmpItemAbbrMatchFuzzy = { fg = theme.syn.keyword, bold = true },
        CmpItemMenu = { fg = theme.syn.comment, italic = true },
        CmpItemKind = { fg = theme.syn.fun },
        CmpItemKindText = { fg = theme.ui.fg },
        CmpItemKindMethod = { fg = theme.syn.fun },
        CmpItemKindFunction = { fg = theme.syn.fun },
        CmpItemKindConstructor = { fg = theme.syn.fun },
        CmpItemKindField = { fg = theme.syn.identifier },
        CmpItemKindVariable = { fg = theme.syn.variable },
        CmpItemKindClass = { fg = theme.syn.type },
        CmpItemKindInterface = { fg = theme.syn.type },
        CmpItemKindModule = { fg = theme.syn.special1 },
        CmpItemKindProperty = { fg = theme.syn.identifier },
        CmpItemKindUnit = { fg = theme.syn.number },
        CmpItemKindValue = { fg = theme.syn.constant },
        CmpItemKindEnum = { fg = theme.syn.type },
        CmpItemKindKeyword = { fg = theme.syn.keyword },
        CmpItemKindSnippet = { fg = theme.syn.string },
        CmpItemKindColor = { fg = theme.syn.special1 },
        CmpItemKindFile = { fg = theme.ui.fg },
        CmpItemKindReference = { fg = theme.syn.special2 },
        CmpItemKindFolder = { fg = theme.syn.fun },
        CmpItemKindEnumMember = { fg = theme.syn.constant },
        CmpItemKindConstant = { fg = theme.syn.constant },
        CmpItemKindStruct = { fg = theme.syn.type },
        CmpItemKindEvent = { fg = theme.syn.keyword },
        CmpItemKindOperator = { fg = theme.syn.operator },
        CmpItemKindTypeParameter = { fg = theme.syn.type },
        CmpGhostText = { fg = theme.syn.comment },
        
        -- Indent Blankline
        IndentBlanklineChar = { fg = theme.ui.nontext, nocombine = true },
        IndentBlanklineContextChar = { fg = theme.ui.special, nocombine = true },
        IndentBlanklineContextStart = { underline = true, sp = theme.ui.special },
        IndentBlanklineSpaceChar = { fg = theme.ui.nontext, nocombine = true },
        IndentBlanklineSpaceCharBlankline = { fg = theme.ui.nontext, nocombine = true },
        
        -- Leap
        LeapMatch = { fg = theme.syn.keyword, bold = true },
        LeapLabelPrimary = { fg = theme.ui.bg, bg = theme.syn.keyword, bold = true },
        LeapLabelSecondary = { fg = theme.ui.bg, bg = theme.syn.fun, bold = true },
        LeapBackdrop = { fg = theme.syn.comment },
        
        -- Lightspeed
        LightspeedGreyWash = { fg = theme.syn.comment },
        LightspeedLabel = { fg = theme.syn.keyword, bold = true, underline = true },
        LightspeedLabelDistant = { fg = theme.syn.fun, bold = true, underline = true },
        LightspeedLabelDistantOverlapped = { fg = theme.syn.special1, underline = true },
        LightspeedLabelOverlapped = { fg = theme.syn.keyword, underline = true },
        LightspeedMaskedChar = { fg = theme.syn.special1 },
        LightspeedOneCharMatch = { bg = theme.syn.keyword, fg = theme.ui.bg, bold = true },
        LightspeedPendingOpArea = { bg = theme.syn.keyword, fg = theme.ui.bg },
        LightspeedShort = { bg = theme.syn.special2, fg = theme.ui.bg, bold = true },
        LightspeedShortCut = { bg = theme.syn.special2, fg = theme.ui.bg, bold = true },
        LightspeedUniqueChar = { bg = theme.syn.fun, fg = theme.ui.bg, bold = true },
        
        -- Bufferline
        BufferLineFill = { bg = theme.ui.bg_dim },
        BufferLineBackground = { fg = theme.ui.fg_dim, bg = theme.ui.bg_dim },
        BufferLineBufferSelected = { fg = theme.ui.fg, bg = theme.ui.bg, bold = true },
        BufferLineBufferVisible = { fg = theme.ui.fg, bg = theme.ui.bg_p1 },
        BufferLineCloseButton = { fg = theme.ui.fg_dim, bg = theme.ui.bg_dim },
        BufferLineCloseButtonSelected = { fg = theme.diag.error, bg = theme.ui.bg },
        BufferLineCloseButtonVisible = { fg = theme.ui.fg, bg = theme.ui.bg_p1 },
        BufferLineModified = { fg = theme.vcs.changed, bg = theme.ui.bg_dim },
        BufferLineModifiedSelected = { fg = theme.vcs.changed, bg = theme.ui.bg },
        BufferLineModifiedVisible = { fg = theme.vcs.changed, bg = theme.ui.bg_p1 },
        BufferLineSeparator = { fg = theme.ui.bg_dim, bg = theme.ui.bg_dim },
        BufferLineSeparatorSelected = { fg = theme.ui.bg, bg = theme.ui.bg },
        BufferLineSeparatorVisible = { fg = theme.ui.bg_p1, bg = theme.ui.bg_p1 },
        BufferLineIndicatorSelected = { fg = theme.syn.keyword, bg = theme.ui.bg },
        BufferLineTab = { fg = theme.ui.fg_dim, bg = theme.ui.bg_dim },
        BufferLineTabSelected = { fg = theme.ui.fg, bg = theme.ui.bg },
        BufferLineTabClose = { fg = theme.diag.error, bg = theme.ui.bg_dim },
        BufferLineDuplicate = { fg = theme.ui.fg_dim, bg = theme.ui.bg_dim, italic = true },
        BufferLineDuplicateSelected = { fg = theme.ui.fg, bg = theme.ui.bg, italic = true },
        BufferLineDuplicateVisible = { fg = theme.ui.fg, bg = theme.ui.bg_p1, italic = true },
        
        -- Trouble
        TroubleText = { fg = theme.ui.fg },
        TroubleCount = { fg = theme.syn.special1, bg = theme.ui.bg_p1 },
        TroubleNormal = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg_p1 },
        
        -- Lazy
        LazyProgressTodo = { fg = theme.ui.nontext },
        LazyProgressDone = { fg = theme.syn.keyword },
        
        -- Mason
        MasonHeader = { fg = theme.ui.bg, bg = theme.syn.keyword, bold = true },
        MasonHeaderSecondary = { fg = theme.ui.bg, bg = theme.syn.fun, bold = true },
        MasonHighlight = { fg = theme.syn.keyword },
        MasonHighlightBlock = { fg = theme.ui.bg, bg = theme.syn.keyword },
        MasonHighlightBlockBold = { fg = theme.ui.bg, bg = theme.syn.keyword, bold = true },
        MasonHighlightSecondary = { fg = theme.syn.fun },
        MasonHighlightBlockSecondary = { fg = theme.ui.bg, bg = theme.syn.fun },
        MasonHighlightBlockBoldSecondary = { fg = theme.ui.bg, bg = theme.syn.fun, bold = true },
        MasonMuted = { fg = theme.ui.fg_dim },
        MasonMutedBlock = { fg = theme.ui.fg, bg = theme.ui.bg_p1 },
        MasonMutedBlockBold = { fg = theme.ui.fg, bg = theme.ui.bg_p1, bold = true },
        
        -- Noice
        NoiceCompletionItemKindDefault = { fg = theme.ui.fg_dim },
        NoiceCompletionItemMenu = { fg = theme.syn.comment },
        NoiceCompletionItemWord = { fg = theme.ui.fg },
        
        -- mini.nvim
        MiniCompletionActiveParameter = { underline = true },
        MiniCursorword = { bg = theme.ui.bg_search },
        MiniCursorwordCurrent = { bg = theme.ui.bg_search },
        MiniIndentscopeSymbol = { fg = theme.ui.special },
        MiniIndentscopePrefix = { nocombine = true },
        MiniJump = { bg = theme.syn.special2, fg = theme.ui.bg },
        MiniJump2dSpot = { fg = theme.syn.special2, bold = true, nocombine = true },
        MiniStarterCurrent = { nocombine = true },
        MiniStarterFooter = { fg = theme.syn.comment, italic = true },
        MiniStarterHeader = { fg = theme.syn.keyword },
        MiniStarterInactive = { fg = theme.syn.comment, italic = true },
        MiniStarterItem = { fg = theme.ui.fg, bg = config.transparent and "NONE" or theme.ui.bg },
        MiniStarterItemBullet = { fg = theme.ui.special },
        MiniStarterItemPrefix = { fg = theme.diag.warning },
        MiniStarterSection = { fg = theme.syn.special1 },
        MiniStarterQuery = { fg = theme.syn.fun },
        MiniStatuslineDevinfo = { fg = theme.ui.fg_dim, bg = theme.ui.bg_p1 },
        MiniStatuslineFileinfo = { fg = theme.ui.fg_dim, bg = theme.ui.bg_p1 },
        MiniStatuslineFilename = { fg = theme.ui.fg_dim, bg = theme.ui.bg_p1 },
        MiniStatuslineInactive = { fg = theme.ui.fg_dim, bg = theme.ui.bg_p1 },
        MiniStatuslineModeCommand = { fg = theme.ui.bg, bg = theme.syn.keyword, bold = true },
        MiniStatuslineModeInsert = { fg = theme.ui.bg, bg = theme.vcs.added, bold = true },
        MiniStatuslineModeNormal = { fg = theme.ui.bg, bg = theme.syn.fun, bold = true },
        MiniStatuslineModeOther = { fg = theme.ui.bg, bg = theme.syn.special1, bold = true },
        MiniStatuslineModeReplace = { fg = theme.ui.bg, bg = theme.diag.error, bold = true },
        MiniStatuslineModeVisual = { fg = theme.ui.bg, bg = theme.syn.special2, bold = true },
        MiniSurround = { bg = theme.syn.special1, fg = theme.ui.bg },
        MiniTablineCurrent = { fg = theme.ui.fg, bg = theme.ui.bg_p1 },
        MiniTablineFill = { bg = theme.ui.bg_dim },
        MiniTablineHidden = { fg = theme.ui.fg_dim, bg = theme.ui.bg_p1 },
        MiniTablineModifiedCurrent = { fg = theme.vcs.changed, bg = theme.ui.bg_p1 },
        MiniTablineModifiedHidden = { fg = theme.vcs.changed, bg = theme.ui.bg_p1 },
        MiniTablineModifiedVisible = { fg = theme.vcs.changed, bg = theme.ui.bg_p1 },
        MiniTablineTabpagesection = { fg = theme.ui.bg, bg = theme.syn.special1 },
        MiniTablineVisible = { fg = theme.ui.fg, bg = theme.ui.bg_p1 },
        MiniTestEmphasis = { bold = true },
        MiniTestFail = { fg = theme.diag.error, bold = true },
        MiniTestPass = { fg = theme.diag.ok, bold = true },
        MiniTrailspace = { bg = theme.diag.error },

        -- DAP-UI (Debugging)
        DapUIVariable = { fg = theme.syn.identifier },
        DapUIScope = { fg = theme.syn.special1 },
        DapUIType = { fg = theme.syn.type },
        DapUIValue = { fg = theme.syn.string },
        DapUIModifiedValue = { fg = theme.syn.special1, bold = true },
        DapUIDecoration = { fg = theme.syn.special1 },
        DapUIThread = { fg = theme.syn.fun },
        DapUIStoppedThread = { fg = theme.syn.special1 },
        DapUIFrameName = { fg = theme.syn.identifier },
        DapUISource = { fg = theme.syn.special2 },
        DapUILineNumber = { fg = theme.syn.special1 },
        DapUIFloatBorder = { fg = theme.ui.float.fg_border },
        DapUIWatchesEmpty = { fg = theme.diag.error },
        DapUIWatchesValue = { fg = theme.syn.fun },
        DapUIWatchesError = { fg = theme.diag.error },
        DapUIBreakpointsPath = { fg = theme.syn.special1 },
        DapUIBreakpointsInfo = { fg = theme.syn.fun },
        DapUIBreakpointsCurrentLine = { fg = theme.syn.fun, bold = true },
        DapUIBreakpointsLine = { fg = theme.syn.special1 },
        DapUIBreakpointsDisabledLine = { fg = theme.syn.comment },

        -- Neotest (Testing)
        NeotestPassed = { fg = theme.diag.ok },
        NeotestFailed = { fg = theme.diag.error },
        NeotestRunning = { fg = theme.diag.warning },
        NeotestSkipped = { fg = theme.diag.hint },
        NeotestTest = { fg = theme.ui.fg },
        NeotestNamespace = { fg = theme.syn.type },  -- A95EFF (purple) - consistent with namespace colors
        NeotestFocused = { fg = theme.syn.special1, bold = true },
        NeotestFile = { fg = theme.syn.special1 },
        NeotestDir = { fg = theme.syn.special1 },
        NeotestBorder = { fg = theme.ui.float.fg_border },
        NeotestIndent = { fg = theme.ui.nontext },
        NeotestExpandMarker = { fg = theme.ui.nontext },

        -- Aerial (Code outline)
        AerialArrayIcon = { fg = theme.syn.special1 },
        AerialBooleanIcon = { fg = theme.syn.constant },
        AerialClassIcon = { fg = theme.syn.type },
        AerialConstantIcon = { fg = theme.syn.constant },
        AerialConstructorIcon = { fg = theme.syn.special1 },
        AerialEnumIcon = { fg = theme.syn.type },
        AerialEnumMemberIcon = { fg = theme.syn.constant },
        AerialEventIcon = { fg = theme.syn.special2 },
        AerialFieldIcon = { fg = theme.syn.identifier },
        AerialFileIcon = { fg = theme.syn.special1 },
        AerialFunctionIcon = { fg = theme.syn.fun },
        AerialInterfaceIcon = { fg = theme.syn.type },
        AerialKeyIcon = { fg = theme.syn.keyword },
        AerialMethodIcon = { fg = theme.syn.fun },
        AerialModuleIcon = { fg = theme.syn.special1 },
        AerialNamespaceIcon = { fg = theme.syn.type },  -- A95EFF (purple) - consistent with namespace colors
        AerialNullIcon = { fg = theme.syn.constant },
        AerialNumberIcon = { fg = theme.syn.number },
        AerialObjectIcon = { fg = theme.syn.type },
        AerialOperatorIcon = { fg = theme.syn.operator },
        AerialPackageIcon = { fg = theme.syn.special1 },
        AerialPropertyIcon = { fg = theme.syn.identifier },
        AerialStringIcon = { fg = theme.syn.string },
        AerialStructIcon = { fg = theme.syn.type },
        AerialTypeParameterIcon = { fg = theme.syn.type },
        AerialVariableIcon = { fg = theme.syn.variable },

        -- BlinkCmp (Modern completion)
        BlinkCmpDoc = { fg = theme.ui.fg, bg = theme.ui.bg_p1 },
        BlinkCmpDocBorder = { fg = theme.ui.float.fg_border, bg = theme.ui.bg_p1 },
        BlinkCmpDocCursorLine = { bg = theme.ui.bg_p2 },
        BlinkCmpGhostText = { fg = theme.ui.fg_dim, italic = true },
        BlinkCmpKind = { fg = theme.syn.special1 },
        BlinkCmpKindClass = { fg = theme.syn.type },
        BlinkCmpKindColor = { fg = theme.syn.special1 },
        BlinkCmpKindConstant = { fg = theme.syn.constant },
        BlinkCmpKindConstructor = { fg = theme.syn.special1 },
        BlinkCmpKindCopilot = { fg = theme.syn.special2 },
        BlinkCmpKindEnum = { fg = theme.syn.type },
        BlinkCmpKindEnumMember = { fg = theme.syn.constant },
        BlinkCmpKindEvent = { fg = theme.syn.special2 },
        BlinkCmpKindField = { fg = theme.syn.identifier },
        BlinkCmpKindFile = { fg = theme.syn.special1 },
        BlinkCmpKindFolder = { fg = theme.syn.special1 },
        BlinkCmpKindFunction = { fg = theme.syn.fun },
        BlinkCmpKindInterface = { fg = theme.syn.type },
        BlinkCmpKindKeyword = { fg = theme.syn.keyword },
        BlinkCmpKindMethod = { fg = theme.syn.fun },
        BlinkCmpKindModule = { fg = theme.syn.special1 },
        BlinkCmpKindOperator = { fg = theme.syn.operator },
        BlinkCmpKindProperty = { fg = theme.syn.identifier },
        BlinkCmpKindReference = { fg = theme.syn.special2 },

        -- Flash (Jump navigation)
        FlashBackdrop = { fg = theme.ui.fg_dim },
        FlashMatch = { fg = theme.ui.fg_reverse, bg = theme.diag.warning, bold = true },
        FlashCurrent = { fg = theme.ui.fg_reverse, bg = theme.diag.error, bold = true },
        FlashLabel = { fg = theme.ui.fg_reverse, bg = theme.syn.special1, bold = true },
        FlashPrompt = { fg = theme.ui.fg },
        FlashPromptIcon = { fg = theme.syn.special1 },
        FlashCursor = { reverse = true },

        -- Additional nvim-cmp kinds
        CmpItemKindCopilot = { fg = theme.syn.special2 },
        CmpItemKindDefault = { fg = theme.ui.fg },

        -- Floaterm
        FloatermBorder = { fg = theme.ui.float.fg_border, bg = theme.ui.float.bg_border },

        -- Indent Blankline (modern)
        IblIndent = { fg = theme.ui.nontext },
        IblWhitespace = { fg = theme.ui.whitespace },
        IblScope = { fg = theme.syn.special1 },

        -- Fidget (LSP progress)
        FidgetTask = { fg = theme.ui.fg_dim },
        FidgetTitle = { fg = theme.syn.fun, bold = true },
        FidgetProgress = { fg = theme.syn.special1 },
        FidgetProgressDone = { fg = theme.diag.ok },
        FidgetProgressTitle = { fg = theme.syn.fun },
    }
end

return M
